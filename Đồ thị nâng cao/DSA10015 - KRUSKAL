#include<bits/stdc++.h>

using namespace std;

using ll = long long;
int n, m;
int sz[1001];
int parent[1001];

struct canh{
	int x, y, z;
};

vector<canh> dscanh;

bool cmp(canh a, canh b){
	return a.z < b.z;
}

void nhap(){
	dscanh.clear();
	cin >> n >> m;
	for(int i = 1; i <= n; i++){
		parent[i] = i;
		sz[i] = 1;
	}
	for(int i = 1; i <= m; i++){
		int x, y, z; cin >> x >> y >> z;
		dscanh.push_back({x, y, z});
	}
}

int find(int u){
	if(u == parent[u]) return u;
	else return parent[u] = find(parent[u]);
}

bool Union(int a, int b){
	a = find(a);
	b = find(b);
	if(a == b) return false;
	if(sz[a] > sz[b]){
		parent[b] = a;
		sz[a] += sz[b];
	}
	else{
		parent[a] = b;
		sz[b] += sz[a];
	}
	return true;
}

void kruskal(){
	sort(dscanh.begin(), dscanh.end(), cmp);
	int ans = 0;
	vector<canh> tree;
	for(int i = 0; i < m; i++){
		if(tree.size() == n - 1) break;
		if(Union(dscanh[i].x, dscanh[i].y)){
			tree.push_back(dscanh[i]);
			ans += dscanh[i].z;
		}
	}
	cout << ans << endl;
}

int main(){
	int t; cin >> t;
	while(t--){
		nhap();
		kruskal();
	}
}
