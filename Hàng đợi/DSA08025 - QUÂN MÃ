#include<bits/stdc++.h>

using namespace std;

using ll = long long;

int s1, s2, t1, t2;

int dx[8] = {2, 2, 1, 1, -1, -1, -2, -2};
int dy[8] = {-1, 1, -2, 2, -2, 2, -1, 1};

int path[9][9];
bool used[9][9];

void bfs(int u, int v){
	path[u][v] = 0;
	queue<pair<int, int>> q;
	q.push({u, v});
	used[u][v] = true;
	while(!q.empty()){
		pair<int, int> tmp = q.front();
		q.pop();
		int u = tmp.first, v = tmp.second;
		for(int k = 0; k < 8; k++){
			int i1 = u + dx[k];
			int j1 = v + dy[k];
			if(i1 >= 1 && i1 <= 8 && j1 >= 1 && j1 <= 8 && !used[i1][j1]){
				path[i1][j1] = path[u][v] + 1;
				used[i1][j1] = true;
				q.push({i1, j1});
			}
		}
	}
}

void inp(){
	memset(used, false, sizeof(used));
	string s; cin >> s;
	s2 = (int) (s[0] - 'a' + 1);
	s1 = (int) (s[1] - '0');
	string t; cin >> t;
	t2 = (int) (t[0] - 'a' + 1);
	t1 = (int) (t[1] - '0');
	bfs(s1, s2);
	cout << path[t1][t2] << endl;
}

int main(){
	int test; cin >> test;
	while(test--){
		inp();
	}
}
